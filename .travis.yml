---
sudo: false
language: python
# configure python version (see https://docs.travis-ci.com/user/languages/python/#specifying-python-versions)
python:
  - "3.7"

env:
  - BOTO_CONFIG="/dev/null"

install:
  # First: install Pulumi SDK with the installation script from https://www.pulumi.com/docs/get-started/install/#installation-script
  - curl -fsSL https://get.pulumi.com | sh
  # Add Pulumi to Travis' PATH so the executable could be found
  - export PATH=$PATH:/home/travis/.pulumi/bin
  - pulumi version

  # Second: Install pulumi-aws dependency (among others like awscli & Ansible) via pipenv dependency manager
  - pip install pipenv
  # Install required (and locked) dependecies from Pipfile.lock (especially pulumi-aws, otherwise we run into "error: no resource plugin 'aws' found in the workspace or on your $PATH"
  # pipenv is smart enough to recognise the existing virtualenv without a prior pipenv shell command (see https://medium.com/@dirk.avery/quirks-of-pipenv-on-travis-ci-and-appveyor-10d6adb6c55b)
  - pipenv install

  # Third: Check, if Pulumi aws plugin was installed correctly
  - pulumi plugin ls

  # Forth: Configure AWS CLI
  - aws configure set aws_access_key_id $AWS_ACCESS_KEY
  - aws configure set aws_secret_access_key $AWS_SECRET_KEY
  - aws configure set default.region eu-central-1
  # show AWS CLI config
  - aws configure list


script:
  # login to app.pulumi.com with the predefined PULUMI_ACCESS_TOKEN
  - pulumi login

  # Select your Pulumi projects' stack
  - pulumi stack select dev

  # destroy pre-created Pulumi instances
  - pulumi destroy --yes

  # generate EC2 keypair and save private key locally (since Pulumi isn't able to do that now)
  - ansible-playbook keypair.yml

  # execute Pulumi to create EC2 instances
  - pulumi up --yes

  # Downloading the Ansible role 'docker' with ansible-galaxy
  - ansible-galaxy install -r requirements.yml -p roles/

  # run Ansible role to install Docker on Ubuntu
  - ansible-playbook playbook.yml

  # use Testinfra with Pytest to execute our tests
  - py.test -v tests/test_docker.py --ssh-identity-file=.ec2ssh/pulumi_key --ssh-config=tests/pytest_ssh_config --hosts='ssh://'$(pulumi stack output publicIp)

  # destroy Pulumi instances after successful tests
  - pulumi destroy --yes